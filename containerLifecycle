  439  # container lifecycle -- to create container , start , stop , pause, unpause , delete
  440  docker images

To create Containers
  441  docker container create --name=c1 httpd
  442  docker ps -a
  443  docker container create --name=c2 nginx
  444  docker ps -a

To Start Containers
  445  docker start c1
  446  docker ps -a
  447  docker start c2
  448  docker ps -a
  To Pause the container

To Stop Containers
    449  docker stop c1
  450  docker stop c2
  451  docker ps -a
  452  docker start c1
  453  docker start c2
  454  docker ps -a
To Pause the container

  455  docker pause c1
  456  docker pause c2
  457  docker ps -a

To UnPause the container
  
  458  docker unpause c1
  459  docker unpause c2
  460  docker ps -a
  
To delete container forcefully  
  
461  docker rm -f c1
  462  docker rm -f c2
  463  docker ps -a
==============
 466  # create + start == Running
  467  # run command
  468  docker run -d --name=c1 httpd
  469  docker run -d --name=c2 httpd
  470  docker run -d --name=c3 httpd
  471  docker run -d --name=c4 httpd
  472  docker ps -a
  473  # -d is for detached mode or eun the container in background

================================================

 478  # to find out IP address of Containers
  479  docker inspect c1 | grep -i ipaddr
  480   docker inspect c1
  481  clear
  482   docker inspect c1 | grep -i ipaddr
  483  docker inspect c2 | grep -i ipaddr
  484  docker inspect c3 | grep -i ipaddr
  485  docker inspect c4 | grep -i ipaddr
  486  curl "172.17.0.2"
  487  curl "172.17.0.3"
  488  curl "172.17.0.4"
  489  curl "172.17.0.5"
  490  ip a s
  491  clear
  492  docker run -d --name=c4 -p 9090:80 httpd
  493  docker run -d --name=c5 -p 9090:80 httpd
  494  docker run -d --name=c6 -p 9091:80 nginx
  495  docker run -d --name=c6 -p 9092:80 kharatramesh/vadapavimages:vadapav
  496  docker run -d --name=c7 -p 9092:80 kharatramesh/vadapavimages:vadapav
  497  docker ps -a
  498  ip as
  499  ip a s
  500  clear
  501  history
==========================
  573  docker ps -a
  574  # how to login inside container
  575  docker exec -it c5 bash
  576  # location of index.html page is : /usr/local/apache2/htdocs/html
  577  # location of index.html page in nginx is: /usr/share/nginx/html
  578  docker exec -it c6 bash
  579  history
================================
 127  iptables -v -t nat -L
  128  history
  129  clear
  130  history
  131  clear
  132  docker images
  133  docker run -d --name=db1 -p 3309:3306 -e MYSQL_ROOT_PASSWORD=123 mysql
  134  docker ps -a
  135  docker exec -it db1 bash
============================
volumes

 308  # life of data = life of container
  309  ls -ld /database
  310  docker run -d --name=db1 -v /database:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123 mysql
  311  ls -ld /database/
  312  ls -l /database/
  313  clear
  314  cd /database/
  315  ls
  316  ls -l google/
  317  ls
  318  clear
  319  docker run -d --name=db2 -v /database:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123 mysql
  320  docker exec -it db2 bash
  321  clear
  322  cd ~
  323  docker rm -f db2
  324  docker rm -f c1
  325  docker run -d --name=db3 -v v1:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123 mysql
  326  docker run -d --name=db4 -v vadapav:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123 mysql
  327  docker volume ls
  328  cd /var/lib/docker/volumes/
  329  ls
  330  cd v1/
  331  ls
  332  cd
  333  cd -
  334  cd _data/
  335  ls
  336  cd ~
  337  docker run -d --name=db5 -v /vadapav:/vadapav  -v vadapav:/var/lib/mysql -p 3306:3306 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123 mysql
  338  docker exec -it db5 bash
  339  cd /vadapav/
  340  ls
  341  cd /var/lib/docker/volumes/vadapav/_data/
  342  ls
  343  touch v{1..10}.txt
  344  ls
  345  history
  346  cd ~
  347  docker run -d --name=t1 --tmpfs /app_logs httpd
  348  docker exec -it t1 bash
  349  # driver : overlay2
  350  docker info
  351  history
===============================================
Creating custom bridge
apt install bridge-utils
brctl show

docker network create --driver=bridge --subnet=21.21.21.0/24 net1
 docker network ls
docker inspect net1
  373  clear
  374  docker inspect c1 | grep -i ipaddr
  378  docker run -d --name=n1 --network=net1 --ip=21.21.21.21 --hostname=dosa.samosa.com --cpus="0.01" --memory=15M -v /samosa:/samosa -v dosa:/dosa -p 9090:80 -p 9091:80 httpd
  379  docker ps -a
  381  docker inspect n1 | grep -i ipaddr
  382  curl "21.21.21.21"
  383  docker stat n1
  384  docker stats n1
===============================================
Host Network
===================
387  docker network ls
  388  docker run -d --name=h1 --network=host  httpd
  389  netstat -tunlp
  390  apt install net-tools
  391  netstat -tunlp
  392  docker run -d --name=h2 --network=host  httpd
  393  docker ps -a
  394  docker logs h2
  395  docker network ls
  396  clear
Null Network
================

  399  docker run -d --name=null1 --network=none httpd
  400  docker rm -f null1
  401  docker network ls
  402  docker run -d --name=null1 --network=none httpd
  403  docker ps -a
  404  docker inspect null1
  405  docker exec -it null1 bash
  406  history
  407  docker info

